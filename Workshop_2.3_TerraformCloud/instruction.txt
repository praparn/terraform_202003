This workshop for operate with module on gcloud via terraform cloud
========================================  Initial Gcloud CLI  ===============================================================
1. Configure project name by command: "gcloud config set project <project id>"
2. Authentication to remote server and start gcloud by command:
    gcloud auth activate-service-account --key-file=/home/ubuntu/GCloud-Lab_Credential.json

3. Test gcloud cli command:
    gcloud auth list
    gcloud compute regions list
    gcloud compute zones list
    gcloud compute networks list
    gcloud projects list

4. Export Credential for default authentication by command:
    export GOOGLE_APPLICATION_CREDENTIALS="/home/ubuntu/GCloud-Lab_Credential.json"
========================================  Initial Gcloud CLI  ===============================================================
========================================  Test Deploy Native VM on Google Cloud  ============================================
5. Start workshop "native workspace" by command:
    cd ~/terraform_202003/Workshop_2.3_TerraformCloud/NativeWorkSpace
    sed -i -e 's/x/<your lab id>/g' ~/terraform_202003/Workshop_2.3_TerraformCloud/NativeWorkSpace/terraform.tfvars
    more 00_provider.tf
    more 01_resource_vpc.tf
    more 02_resource_instance.tf
    more variables.tf
    more terraform.tfvars

6. Start process of terraform operation:    
    terraform init
    terraform fmt -check
    terraform validate
    terraform apply -auto-approve -parallelism=5        (Wait 5 Min)

7. Check output detail of virtual machine instance by command: terraform output  (* Record instance id, ip address etc)
---------------------------------------------------------------------------
    Example:
    Outputs:
google_compute_instance_labserver_id = 3824751916358927585
google_compute_instance_labserver_nat_ip = 35.240.255.33
---------------------------------------------------------------------------

8. Check status of instance and detail by command: 
    more terraform.tfvars |grep 'compute ='
    gcloud compute instances list --filter="name=('<compute name>')"
    ---------------------------------------------------------------------------
    Example Output:
    ---------------------------------------------------------------------------
    NAME                     ZONE               MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP    STATUS
    lab-computer-student-23  asia-southeast1-a  f1-micro                   10.148.0.2   35.240.255.33  RUNNING

9. Test access to new machine by ssh connection to <public ip>
    ssh -i ~/terraformlab ubuntu@<public ip>
  
10. (Remote Shell) Test docker command: sudo docker run hello-world && exit

11. Destroy EC2/EBS from this script by command:(Wait 3 -5 min) 
    terraform destroy -auto-approve

12. Check status of EC2 and detail by command: 
    more terraform.tfvars |grep 'compute ='
    gcloud compute instances list --filter="name=('<compute name>')"

    ---------------------------------------------------------------------------
    Example Output:
    ---------------------------------------------------------------------------
    Listed 0 items.

========================================  Test Deploy Native VM on Google Cloud  ============================================
========================================  SignUp with Terraform Cloud (Demo by Teacher Workshop)  ===========================
1. Create Git with name "TerraformCloudeSpace" (Private Repository) and Add folder to git
2. Access url: https://app.terraform.io/signup/account and Register
3. Access url: https://app.terraform.io/session and create organization name "TerraformCloudeSpace-Organzation"
4. (Terraform Cloud)Create workspace name "TerraformCloudeSpace-Workspace"with VCS (Version Control Provider)
5. (Terraform Cloud)Configure variable for operate
    ---------------------------------------------------------------------------
project_id = "polar-decorator-267303"
region = "asia-southeast1"
zone = "asia-southeast1-a"
gcompute_network_name = "lab-vpc-student-master"
gcompute_createsubnet = true                            ==> HCL
compute_name = "lab-computer-student-master.terraform.local"
compute = "lab-computer-student-master"
compute_type = "f1-micro"
image = "ubuntu-1804-lts"
disk_size = 10                                          ==> HCL
user_data = curl https://raw.githubusercontent.com/praparn/sourcesetup/master/standard_docker_aws.sh > /tmp/setup.sh && chmod +x /tmp/setup.sh && /tmp/setup.sh
    ---------------------------------------------------------------------------

6. Copy file "GCloud-Lab_Credential.json" and "terraform_gcloud.pub" to folder of github's repository
7. Start commit git repository with comment "Git Action Credential"
8. (Terraform Cloud)Switch to Run Tab, Operate "Queue Plan" and Monitor result on terraform cloud (Tab: Run)
9. (Terraform Cloud)Verify terraform plan and "Confirm & Apply" (Add Comment: Git Action Credential)
10. (Terraform Cloud)Monitor progress on terraform cloud
11. Check status of instance and detail by command: 
    gcloud compute instances list --filter="name=('lab-computer-student-master')"        <== value from variable compute
    ---------------------------------------------------------------------------
    Example Output:
    ---------------------------------------------------------------------------
    NAME                     ZONE               MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP    STATUS
    lab-computer-student-23  asia-southeast1-a  f1-micro                   10.148.0.2   35.240.255.33  RUNNING

12. Test access to new machine by ssh connection to <public ip>
    ssh -i ~/terraformlab ubuntu@<public ip>
  
13. (Remote Shell) Test docker command: sudo docker run hello-world && exit

14. (Terraform Cloud)Go to tab variable and set environment variable "CONFIRM_DESTROY" = 1

15. (Terraform Cloud)Go to tab destruction & destroy

16. (Terraform Cloud)Select "Queue destroy plan"

17. (Terraform Cloud)Monitor result on terraform cloud (Tab: Run)
18. (Terraform Cloud)Verify terraform plan and "Confirm & Apply" (Add Comment: Git Action Destroy)
19. (Terraform Cloud)Monitor progress on terraform cloud

20. Check status of EC2 and detail by command: 
    gcloud compute instances list --filter="name=('lab-computer-student-master')"
    ---------------------------------------------------------------------------
    Example Output:
    ---------------------------------------------------------------------------
    Listed 0 items.

21. (Terraform Cloud)Go to tab destruction & destroy and Select "Delete from Terraform Cloud"
22. (Terraform Cloud)Input workspace name
23. Delete repository from github
24. Clean Up Remote Machine by command:
    cd ~/
    rm -rf ~/*
========================================  SignUp with Terraform Cloud (Demo by Teacher Workshop)  ===========================